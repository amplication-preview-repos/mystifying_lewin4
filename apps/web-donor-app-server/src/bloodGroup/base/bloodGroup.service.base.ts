/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BloodGroup as PrismaBloodGroup,
  BloodBank as PrismaBloodBank,
  Donor as PrismaDonor,
} from "@prisma/client";

export class BloodGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BloodGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bloodGroup.count(args);
  }

  async bloodGroups<T extends Prisma.BloodGroupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodGroupFindManyArgs>
  ): Promise<PrismaBloodGroup[]> {
    return this.prisma.bloodGroup.findMany<Prisma.BloodGroupFindManyArgs>(args);
  }
  async bloodGroup<T extends Prisma.BloodGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodGroupFindUniqueArgs>
  ): Promise<PrismaBloodGroup | null> {
    return this.prisma.bloodGroup.findUnique(args);
  }
  async createBloodGroup<T extends Prisma.BloodGroupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodGroupCreateArgs>
  ): Promise<PrismaBloodGroup> {
    return this.prisma.bloodGroup.create<T>(args);
  }
  async updateBloodGroup<T extends Prisma.BloodGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodGroupUpdateArgs>
  ): Promise<PrismaBloodGroup> {
    return this.prisma.bloodGroup.update<T>(args);
  }
  async deleteBloodGroup<T extends Prisma.BloodGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodGroupDeleteArgs>
  ): Promise<PrismaBloodGroup> {
    return this.prisma.bloodGroup.delete(args);
  }

  async findBloodBanks(
    parentId: string,
    args: Prisma.BloodBankFindManyArgs
  ): Promise<PrismaBloodBank[]> {
    return this.prisma.bloodGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bloodBanks(args);
  }

  async findDonors(
    parentId: string,
    args: Prisma.DonorFindManyArgs
  ): Promise<PrismaDonor[]> {
    return this.prisma.bloodGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .donors(args);
  }
}
