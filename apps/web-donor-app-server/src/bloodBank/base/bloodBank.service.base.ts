/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BloodBank as PrismaBloodBank,
  BloodGroup as PrismaBloodGroup,
  Location as PrismaLocation,
} from "@prisma/client";

export class BloodBankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BloodBankCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bloodBank.count(args);
  }

  async bloodBanks<T extends Prisma.BloodBankFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodBankFindManyArgs>
  ): Promise<PrismaBloodBank[]> {
    return this.prisma.bloodBank.findMany<Prisma.BloodBankFindManyArgs>(args);
  }
  async bloodBank<T extends Prisma.BloodBankFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodBankFindUniqueArgs>
  ): Promise<PrismaBloodBank | null> {
    return this.prisma.bloodBank.findUnique(args);
  }
  async createBloodBank<T extends Prisma.BloodBankCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodBankCreateArgs>
  ): Promise<PrismaBloodBank> {
    return this.prisma.bloodBank.create<T>(args);
  }
  async updateBloodBank<T extends Prisma.BloodBankUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodBankUpdateArgs>
  ): Promise<PrismaBloodBank> {
    return this.prisma.bloodBank.update<T>(args);
  }
  async deleteBloodBank<T extends Prisma.BloodBankDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BloodBankDeleteArgs>
  ): Promise<PrismaBloodBank> {
    return this.prisma.bloodBank.delete(args);
  }

  async getBloodGroup(parentId: string): Promise<PrismaBloodGroup | null> {
    return this.prisma.bloodBank
      .findUnique({
        where: { id: parentId },
      })
      .bloodGroup();
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.bloodBank
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
