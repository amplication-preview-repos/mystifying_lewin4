/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DonorService } from "../donor.service";
import { DonorCreateInput } from "./DonorCreateInput";
import { Donor } from "./Donor";
import { DonorFindManyArgs } from "./DonorFindManyArgs";
import { DonorWhereUniqueInput } from "./DonorWhereUniqueInput";
import { DonorUpdateInput } from "./DonorUpdateInput";

export class DonorControllerBase {
  constructor(protected readonly service: DonorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Donor })
  async createDonor(@common.Body() data: DonorCreateInput): Promise<Donor> {
    return await this.service.createDonor({
      data: {
        ...data,

        bloodGroup: data.bloodGroup
          ? {
              connect: data.bloodGroup,
            }
          : undefined,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        age: true,
        available: true,

        bloodGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weight: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Donor] })
  @ApiNestedQuery(DonorFindManyArgs)
  async donors(@common.Req() request: Request): Promise<Donor[]> {
    const args = plainToClass(DonorFindManyArgs, request.query);
    return this.service.donors({
      ...args,
      select: {
        age: true,
        available: true,

        bloodGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weight: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Donor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async donor(
    @common.Param() params: DonorWhereUniqueInput
  ): Promise<Donor | null> {
    const result = await this.service.donor({
      where: params,
      select: {
        age: true,
        available: true,

        bloodGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weight: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Donor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDonor(
    @common.Param() params: DonorWhereUniqueInput,
    @common.Body() data: DonorUpdateInput
  ): Promise<Donor | null> {
    try {
      return await this.service.updateDonor({
        where: params,
        data: {
          ...data,

          bloodGroup: data.bloodGroup
            ? {
                connect: data.bloodGroup,
              }
            : undefined,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          age: true,
          available: true,

          bloodGroup: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          weight: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Donor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDonor(
    @common.Param() params: DonorWhereUniqueInput
  ): Promise<Donor | null> {
    try {
      return await this.service.deleteDonor({
        where: params,
        select: {
          age: true,
          available: true,

          bloodGroup: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          weight: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
